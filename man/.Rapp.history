data(dat_chip)#
  head(dat_chip)#
  data(GO_BP_list,package="seq2pathway.data")#
  data(Des_BP_list,package="seq2pathway.data")#
  newOntology <- list(GO_BP_list[1:200], Des_BP_list[1:200])#
  # A demo run of this funcion#
  FS_test<- FisherTest_GO_BP_MF_CC(gs=as.vector(rownames(dat_chip)),#
                                 Ontology="newOntology", newOntology=newOntology)#
  FS_test
source("https://bioconductor.org/biocLite.R")
biocLite('seq2pathway')
data(dat_chip)#
  head(dat_chip)#
  data(GO_BP_list,package="seq2pathway.data")#
  data(Des_BP_list,package="seq2pathway.data")#
  newOntology <- list(GO_BP_list[1:200], Des_BP_list[1:200])#
  # A demo run of this funcion#
  FS_test<- FisherTest_GO_BP_MF_CC(gs=as.vector(rownames(dat_chip)),#
                                 Ontology="newOntology", newOntology=newOntology)#
  FS_test
biocLite('seq2pathway.data')
data(dat_chip)#
  head(dat_chip)#
  data(GO_BP_list,package="seq2pathway.data")#
  data(Des_BP_list,package="seq2pathway.data")#
  newOntology <- list(GO_BP_list[1:200], Des_BP_list[1:200])#
  # A demo run of this funcion#
  FS_test<- FisherTest_GO_BP_MF_CC(gs=as.vector(rownames(dat_chip)),#
                                 Ontology="newOntology", newOntology=newOntology)#
  FS_test
?dat_chip
??dat_chip
library(dat_chip)
library('dat_chip')
library('seq2pathway')
library('seq2pathway.data')
data(dat_chip)
data(dat_chip)#
  head(dat_chip)#
  data(GO_BP_list,package="seq2pathway.data")#
  data(Des_BP_list,package="seq2pathway.data")#
  newOntology <- list(GO_BP_list[1:200], Des_BP_list[1:200])#
  # A demo run of this funcion#
  FS_test<- FisherTest_GO_BP_MF_CC(gs=as.vector(rownames(dat_chip)),#
                                 Ontology="newOntology", newOntology=newOntology)#
  FS_test
names(FS_test)
FS_test
class(FS_test)
FS_test$newOntology
plotTop10 = function(res,fdr=0.05,or=2,myfileID=NULL){#
  if(nrow(res)>0)#
  { #
  	 if (!class(res) %in% c("matrix","data.frame")) stop('Pls give a matrix or data.frame as the "res" input!')#
  	 if(!grepl("FDR", colnames(res))) stop('Pls give a matrix or data.frame with column name "FDR"')#
  	 if(!grepl("Fisher_odds", colnames(res))) stop('Pls give a matrix or data.frame with column name "Fisher_odds"')#
  	 #if(!grepl("GeneSet", colnames(res))) stop('Pls give a matrix or data.frame with column name "GeneSet"')#
  	 res = subset(res,Fisher_odds>or & FDR<fdr)#
    if(nrow(res)>10) {res <- res[1:10,]}#
    # because barplot() plots from bottom up !! need to re-order the inputs #
    res <- res[order(res$FDR,decreasing=T),]#
    tmp <- barplot(res$Fisher_odds, #
                   main=paste0(myfileID,' n=',nrow(res)), #
                   horiz=TRUE,#
                   xlab="grey bar: Fisher_odds / red line: -log(FDR)",#
                   xlim =c(0,max(c(-log10(res$FDR), res$Fisher_odds))))#
    lines( y=tmp, -log10(res$FDR), col="red", type="o",pch=19,lwd=2)#
    if('GeneSet' %in% colnames(res)){#
      text(x = fdr,y=tmp, res$GeneSet, pos=4)#
    }else if('Intersect_gene' %in% colnames(res)){#
      text(x = fdr,y=tmp, res$Intersect_gene, pos=4)#
    }#
    abline(v=-log10(fdr), lty=2)#
  }#
}
plotTop10(FS_test$newOntology)
head(âˆš)
head(FS_test$newOntology)
(FS_test$newOntologycolnames
)
colnames(FS_test$newOntology)
debug(plotTop10)
plotTop10(FS_test$newOntology)
!grepl("FDR", colnames(res))
any(grepl("FDR", colnames(res)))
grepl("FDR", colnames(res))
plotTop10 = function(res,fdr=0.05,or=2,myfileID=NULL){#
  if(nrow(res)>0)#
  { #
  	 if (!class(res) %in% c("matrix","data.frame")) stop('Pls give a matrix or data.frame as the "res" input!')#
  	 if(any(grepl("FDR", colnames(res)))) stop('Pls give a matrix or data.frame with column name "FDR"')#
  	 if(any(grepl("Fisher_odds", colnames(res)))) stop('Pls give a matrix or data.frame with column name "Fisher_odds"')#
  	 #if(!grepl("GeneSet", colnames(res))) stop('Pls give a matrix or data.frame with column name "GeneSet"')#
  	 res = subset(res,Fisher_odds>or & FDR<fdr)#
    if(nrow(res)>10) {res <- res[1:10,]}#
    # because barplot() plots from bottom up !! need to re-order the inputs #
    res <- res[order(res$FDR,decreasing=T),]#
    tmp <- barplot(res$Fisher_odds, #
                   main=paste0(myfileID,' n=',nrow(res)), #
                   horiz=TRUE,#
                   xlab="grey bar: Fisher_odds / red line: -log(FDR)",#
                   xlim =c(0,max(c(-log10(res$FDR), res$Fisher_odds))))#
    lines( y=tmp, -log10(res$FDR), col="red", type="o",pch=19,lwd=2)#
    if('GeneSet' %in% colnames(res)){#
      text(x = fdr,y=tmp, res$GeneSet, pos=4)#
    }else if('Intersect_gene' %in% colnames(res)){#
      text(x = fdr,y=tmp, res$Intersect_gene, pos=4)#
    }#
    abline(v=-log10(fdr), lty=2)#
  }#
}
